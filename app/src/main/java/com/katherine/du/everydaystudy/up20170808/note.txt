CMake  3.6.4111459 (revision: 3.6.4111459)
NDK    android-ndk-r15b (revision: 15.1.4119039)
编译    C++11


JNI（Java Native Interface）：Java本地接口。专门用于和本地代码交互。

NDK（Native Development Kit） : 原生开发工具包，即帮助开发原生代码的一系列工具，
    包括但不限于编译工具、一些公共库、开发IDE等。

NDK 工具包中提供了完整的一套将 c/c++ 代码编译成静态/动态库的工具，
    而 Android.mk 和 Application.mk 你可以认为是描述编译参数和一些配置的文件。
    比如指定使用c++11还是c++14编译，会引用哪些共享库，并描述关系等，还会指定编译的 abi。
    只有有了这些 NDK 中的编译工具才能准确的编译 c/c++ 代码。

ndk-build 文件是 Android NDK r4 中引入的一个 shell 脚本。
    其用途是调用正确的 NDK 构建脚本。其实最终还是会去调用 NDK 自己的编译工具。

CMake 又是什么呢。脱离 Android 开发来看，c/c++ 的编译文件在不同平台是不一样的。
    Unix 下会使用 makefile 文件编译，Windows 下会使用 project 文件编译。
    而 CMake 则是一个跨平台的编译工具，它并不会直接编译出对象，
    而是根据自定义的语言规则（CMakeLists.txt）生成 对应 makefile 或 project 文件，然后再调用底层的编译。

在 Android Studio 2.2 之后你有2种选择来编译你写的 c/c++ 代码。
    一个是 ndk-build + Android.mk + Application.mk 组合，
    另一个是 CMake + CMakeLists.txt 组合。
    这2个组合与 Android 代码和 c/c++ 代码无关，只是不同的构建脚本和构建命令。

ABI（Application binary interface）应用程序二进制接口。

    armeabi 设备只兼容 armeabi；

    armeabi-v7a 设备兼容 armeabi-v7a、armeabi；

    arm64-v8a 设备兼容 arm64-v8a、armeabi-v7a、armeabi；

    X86 设备兼容 X86、armeabi；

    X86_64 设备兼容 X86_64、X86、armeabi；

    mips64 设备兼容 mips64、mips；

    mips 只兼容 mips；

ARM目前是移动处理器的老大。ARM的合作伙伴们基于ARM的设计向移动和嵌入式市场的出货量已经达500亿片。
    拥有着低功耗，简明的64位设计，异构计算，以及作为移动计算的标准，看来ARM必能保持其老大的地位。
    对于安卓，ARM已然成为标准，这对Intel和MIPS而言是个问题。

尽管安卓的主要编程语言是Java，开发者也可以使用现有的代码（比如C或者C++）去开发应用。
    这些固定平台的应用通常都编译成ARM处理器的程序，不全都会编译成Intel或者MIPS处理器的程序。

为了解决这个问题，Intel和MIPS要使用特殊的转换软件把ARM的指令转换成他们处理器使用的指令。
    这当然是会降低性能的。

目前MIPS和Intel声称兼容Play Store里大约90%的应用。对于最受欢迎的150个应用，兼容率是100%。
    一方面兼容率很高，另一方面表明ARM的主导地位，使得其他的处理器设计者需要提供一个兼容层。

http://blog.coderclock.com/2017/05/07/android/Android-so-files-compatibility-and-adaptation/
http://www.jianshu.com/p/cb05698a1968
https://developer.android.google.cn/ndk/guides/abis.html



















